alias currentPID R0;
alias procTbl R1;

currentPID = [SYSTEM_STATUS_TABLE + 1];
multipush(BP);
procTbl = PROCESS_TABLE + currentPID*16;
[procTbl + 12] = SP%512;
[procTbl + 14] = PTBR;
[procTbl + 15] = PTLR;

alias newPID R2;
alias newProcTbl R4;
alias counter R3;
if([SYSTEM_STATUS_TABLE + 5] != 0) then
    newPID = SWAPPER_DAEMON;
    newProcTbl = PROCESS_TABLE + newPID*16;
    if([newProcTbl + 4] != READY && [newProcTbl + 4] != CREATED) then
        newPID = 0;
        newProcTbl = PROCESS_TABLE + newPID*16;
    endif;
else
    counter = 1;
    while (counter <= MAX_PROC_NUM) do
        if (counter == MAX_PROC_NUM) then
            newPID = 0;
            newProcTbl = PROCESS_TABLE + newPID*MAX_PROC_NUM;
            break;
        else
            newPID = (currentPID + counter)%MAX_PROC_NUM;
            newProcTbl = PROCESS_TABLE + newPID*MAX_PROC_NUM;
        endif;

        if (newPID != 0 && [newProcTbl + 6] != 1) then
            if ([newProcTbl + 4] == CREATED || [newProcTbl + 4] == READY) then
                break;
            endif;
        endif;
        counter = counter + 1;
    endwhile;
endif;

SP = [newProcTbl + 11]*512 + [newProcTbl + 12];
PTBR = [newProcTbl + 14];
PTLR = [newProcTbl + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

if ([newProcTbl + 4] == CREATED) then
    [newProcTbl + 4] = RUNNING;
    SP = [newProcTbl + 13];
    BP = [[newProcTbl + 11]*512];
    [newProcTbl + 9] = 0;
    ireturn;
endif;

[newProcTbl + 4] = RUNNING;
multipop(BP);
return;
