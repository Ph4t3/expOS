alias userSP R6;
alias PID R7;
alias fileDesc R8;
alias phyAddrRetVal R9;
alias word R10;
alias userAreaPg R11;
alias opnFileIdx R12;
alias inodeIdx R13;
alias LseekPtr R14;

PID = [SYSTEM_STATUS_TABLE + 1];
// Set MODE flag
[PROCESS_TABLE + PID*16 + 9] = INT_WRITE;

//Changing User stack to kernel Stack
userSP = SP;
[PROCESS_TABLE + PID*16 + 13] = SP;
SP = [PROCESS_TABLE + PID*16 + 11]*512 - 1;

word     = [[PTBR + 2*((userSP - 3)/512)]*512 + (userSP - 3)%512];
fileDesc = [[PTBR + 2*((userSP - 4)/512)]*512 + (userSP - 4)%512];
phyAddrRetVal = [PTBR + 2*((userSP - 1)/512)]*512 + (userSP - 1)%512;
userAreaPg = [PROCESS_TABLE + PID*16 + 11];

if(fileDesc == -2) then
    multipush(R6, R7, R8, R9, R10);
    R1 = TERMINAL_WRITE;
    R2 = PID;
    R3 = word;
    call DEVICE_MANAGER;
    multipop(R6, R7, R8, R9, R10);

    [phyAddrRetVal] = 0;
    call Exit;
else
    if((fileDesc < 0) || (fileDesc > 7)) then
        [phyAddrRetVal] = -1;
        call Exit;
    endif;

    if([userAreaPg*512 + RESOURCE_TABLE_OFFSET + fileDesc*2] != FILE) then
        [phyAddrRetVal] = -1;
        call Exit;
    endif;

    opnFileIdx = [userAreaPg*512 + RESOURCE_TABLE_OFFSET + fileDesc*2 + 1];
    inodeIdx = [OPEN_FILE_TABLE + opnFileIdx*4];

    // Check if File can be written to by current user
    if
        (([PROCESS_TABLE + PID*16 + 3] != 1) &&
        ([PROCESS_TABLE + PID*16 + 3] != [INODE_TABLE + inodeIdx*16 + 3]) &&
        ([INODE_TABLE + inodeIdx*16 + 4] == EXCLUSIVE))
    then
        [phyAddrRetVal] = -3;
        call Exit;
    endif;

    // Acquire lock on file
    multipush(R6, R7, R8, R9, R10, R11, R12, R13);
    R1 = ACQUIRE_INODE;
    R2 = PID;
    R3 = inodeIdx;
    call RESOURCE_MANAGER;
    multipop(R6, R7, R8, R9, R10, R11, R12, R13);
    // If Locking fails
    if(R0 == -1) then
        [phyAddrRetVal] = -1;
        call Exit;
    endif;

    LseekPtr = OPEN_FILE_TABLE + opnFileIdx*4 + 2;

    // If EOF
    if([LseekPtr] == MAX_FILE_SIZE) then
        [phyAddrRetVal] = -2;
        R3 = inodeIdx;
        call ReleaseLock;
    endif;
    // Allocate new page if needed
    if
        ((([LseekPtr]%512) == 0) &&
        ([LseekPtr] == [INODE_TABLE + inodeIdx*16 + 2]))
    then
        multipush(R6, R7, R8, R9, R10, R11, R12, R13, R14);
        R1 = GET_FREE_BLOCK;
        call MEMORY_MANAGER;
        multipush(R6, R7, R8, R9, R10, R11, R12, R13, R14);

        if(R0 == -1) then
            [phyAddrRetVal] = -2;
            call Exit;
        endif;
        [INODE_TABLE + inodeIdx*16 + 8 + ([LseekPtr]/512)] = R0;
    endif;

    multipush(R6, R7, R8, R9, R10, R11, R12, R13, R14);
    R1 = BUFFERED_WRITE;
    R2 = [INODE_TABLE + inodeIdx*16 + 8 + [LseekPtr]/512];
    R3 = [LseekPtr]%512;
    R4 = word;
    call FILE_MANAGER;
    multipop(R6, R7, R8, R9, R10, R11, R12, R13, R14);

    // Increment File Size if at EOF
    if([LseekPtr] == [INODE_TABLE + inodeIdx*16 + 2]) then
        [INODE_TABLE + inodeIdx*16 + 2] = [INODE_TABLE + inodeIdx*16 + 2] + 1;
        [ROOT_FILE + inodeIdx*8 + 1] = [ROOT_FILE + inodeIdx*8 + 1] + 1;
    endif;

    [LseekPtr] = [LseekPtr] + 1;

    [phyAddrRetVal] = 0;
    R3 = inodeIdx;
    call ReleaseLock;
endif;

ReleaseLock:
    R1 = RELEASE_INODE;
    R2 = PID;
    call RESOURCE_MANAGER;
    call Exit;

Exit:
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    [PROCESS_TABLE + PID*16 + 9] = 0;
    ireturn;
