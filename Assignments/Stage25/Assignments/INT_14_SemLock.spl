alias userSP R5;
alias sysCallNo R6;
alias phyAddrRetValue R7;
alias PID R8;
alias counter R9;
alias userAreaPg R10;
alias SEMDesc R11;
alias SEMID R12;

//Changing User stack to kernel Stack
userSP = SP;
PID = [SYSTEM_STATUS_TABLE + 1];
userAreaPg = [PROCESS_TABLE + PID*16 + 11];
[PROCESS_TABLE + PID*16 + 13] = SP;
SP = userAreaPg*512 - 1;

sysCallNo = [[PTBR + 2*((userSP - 5)/512)]*512 + (userSP - 5)%512];
phyAddrRetValue = [PTBR + 2*((userSP - 1)/512)]*512 + (userSP - 1)%512;
SEMDesc = [[PTBR + 2*((userSP - 4)/512)]*512 + (userSP - 4)%512];

if(sysCallNo == INT_SEMLOCK) then
    [PROCESS_TABLE + PID*16 + 9] = INT_SEMLOCK;
    
    // Check if SEMDesc is valid
    if((SEMDesc < 0) || (SEMDesc > 7) || ([userAreaPg*512 + RESOURCE_TABLE_OFFSET + SEMDesc*2] != SEMAPHORE)) then
        [phyAddrRetValue] = -1;
        call Exit;
    endif;

    SEMID = [userAreaPg*512 + RESOURCE_TABLE_OFFSET + SEMDesc*2 + 1];
    // Check if semaphore is available for locking
    while(([SEMAPHORE_TABLE + 4*SEMID] != -1) && ([SEMAPHORE_TABLE + 4*SEMID] != PID)) do
        [PROCESS_TABLE + PID*16 + 4] = WAIT_SEMAPHORE;
        [PROCESS_TABLE + PID*16 + 5] = SEMID;
        multipush(R5, R6, R7, R8, R9, R10, R11, R12);
        call SCHEDULER;
        multipop(R5, R6, R7, R8, R9, R10, R11, R12);
    endwhile;

    //Lock the semaphore
    [SEMAPHORE_TABLE + 4*SEMID] = PID;

    [phyAddrRetValue] = 0;
    call Exit;
endif;

if(sysCallNo == INT_SEMUNLOCK) then
    [PROCESS_TABLE + PID*16 + 9] = INT_SEMUNLOCK;
    
    // Check if SEMID is valid
    if((SEMDesc < 0) || (SEMDesc > 7) || ([userAreaPg*512 + RESOURCE_TABLE_OFFSET + SEMDesc*2] != SEMAPHORE)) then
        [phyAddrRetValue] = -1;
        call Exit;
    endif;

    SEMID = [userAreaPg*512 + RESOURCE_TABLE_OFFSET + SEMDesc*2 + 1];
    // Check if semaphore is locked
    if([SEMAPHORE_TABLE + SEMID*4] != -1) then
        // Check if semaphore is locked by current process
        if([SEMAPHORE_TABLE + SEMID*4] != PID) then
            [phyAddrRetValue] = -2;
            call Exit;
        endif;

        [SEMAPHORE_TABLE + SEMID*4] = -1;
        // Make waiting processes READY
        counter = 0;
        while(counter < MAX_PROC_NUM) do
            if(([PROCESS_TABLE + counter*16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + counter*16 + 5] == SEMID)) then
                [PROCESS_TABLE + counter*16 + 4] = READY;
            endif;
            counter = counter + 1;
        endwhile;
    endif;

    [phyAddrRetValue] = 0;
    call Exit;
endif;

Exit:
    SP = userSP;
    [PROCESS_TABLE + PID*16 + 9] = 0;
    ireturn;
