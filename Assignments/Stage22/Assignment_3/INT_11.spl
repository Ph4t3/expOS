alias userSP R5;
alias sysCallNo R6;
alias phyAddrRetValue R7;
alias PID R8;

//Changing User stack to kernel Stack
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

sysCallNo = [[PTBR + 2*((userSP - 5)/512)]*512 + (userSP - 5)%512];
phyAddrRetValue = [PTBR + 2*((userSP - 1)/512)]*512 + (userSP - 1)%512;
PID = [SYSTEM_STATUS_TABLE + 1];

if(sysCallNo == INT_GETPID) then
    [PROCESS_TABLE + PID*16 + 9] = INT_GETPID;
    [phyAddrRetValue] = PID;
    call Exit;
endif;

if(sysCallNo == INT_GETPPID) then
    [PROCESS_TABLE + PID*16 + 9] = INT_GETPPID;
    [phyAddrRetValue] = [PROCESS_TABLE + PID*16 + 2];
    call Exit;
endif;

if(sysCallNo == INT_WAIT) then
    [PROCESS_TABLE + PID*16 + 9] = INT_WAIT;

    alias waitPid R9;
    waitPid = [[PTBR + 2*((userSP - 4)/512)]*512 + (userSP - 4)%512];

    if ((PID == waitPid) || ([PROCESS_TABLE + waitPid*16 + 4] == TERMINATED) || (waitPid < 1) || (waitPid > 15)) then
        [phyAddrRetValue] = -1;
        call Exit;
    endif;

    [PROCESS_TABLE + PID*16 + 4] = WAIT_PROCESS;
    [PROCESS_TABLE + PID*16 + 5] = waitPid;

    multipush(R5, R6, R7, R8, R9);
    call SCHEDULER;
    multipop(R5, R6, R7, R8, R9);

    [phyAddrRetValue] = 0;
    call Exit;
endif;

if(sysCallNo == INT_SIGNAL) then
    [PROCESS_TABLE + PID*16 + 9] = INT_SIGNAL;

    alias counter R9;
    counter = 1;
    while(counter < 16) do 
        if(([PROCESS_TABLE + counter*16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + counter*16 + 5] == PID)) then
            [PROCESS_TABLE + counter*16 + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;

    [phyAddrRetValue] = 0;
    call Exit;
endif;

Exit:
    SP = userSP;
    [PROCESS_TABLE + PID*16 + 9] = 0;
    // No.of Kernel Mode Switches
[29585] = [29585] + 1;

ireturn;
