alias userSP R5;
alias fileName R6;
alias counter R7;
alias inodeIndex R8;
alias userAreaPage R9;
alias PID R10;

//Setting Mode Flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9;

//Saving userSP
userSP = SP;
//Changing User stack to kernel Stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

//Arg 1
fileName = [[PTBR + 2*((userSP - 4)/512)]*512 + (userSP - 4)%512];
counter = 0;
inodeIndex = -1;
//Checking if file is present
while (counter < MAX_FILE_NUM) do
	if([INODE_TABLE + counter*16 + 1] == fileName) then
		inodeIndex = counter;	
		break;
	endif;
	counter = counter + 1;
endwhile;
if((inodeIndex == -1) || ([INODE_TABLE + counter*16 + 0] != EXEC)) then
	//Return Value
	[[PTBR + 2*((userSP - 1)/512)]*512 + (userSP - 1)%512] = -1;
	//Mode Flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
	SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
	// No.of Kernel Mode Switches
[29585] = [29585] + 1;

ireturn;
endif;

//Calling Exit Function
multipush(R5, R6, R7, R8);
R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;
multipop(R5, R6, R7, R8);

//Setting User Area Page again
PID = [SYSTEM_STATUS_TABLE + 1];
userAreaPage = [PROCESS_TABLE + PID*16 + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
//Decrement MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
//Reinitialize SP
SP = userAreaPage*512 - 1;
[PROCESS_TABLE + PID*16 + 4] = RUNNING;
[PROCESS_TABLE + PID*16 + 7] = inodeIndex;

// Initialize per process resource table
counter = 0;
while (counter < 8) do
	[userAreaPage*512 + 512-16 + counter*2] = -1;
	[userAreaPage*512 + 512-16 + counter*2 + 1] = -1;
	counter = counter + 1;
endwhile;

//Setting Page Table
PTBR = PAGE_TABLE_BASE + PID*20;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Initialize DISK_MAP_TABLE
counter = 0;
while (counter < 10) do
	[DISK_MAP_TABLE + PID*10 + counter] = -1;
	counter = counter + 1;	
endwhile;
//Initialize Code Block in DISK_MAP_TABLE
counter = 0;
while (counter < 4) do
	[DISK_MAP_TABLE + PID*10 + 4 + counter] = [INODE_TABLE + inodeIndex*16 + 8 + counter];
	counter = counter + 1;
endwhile;

//Code
multipush(R5, R6, R7, R8, R10);
R1 = GET_CODE_PAGE;
R2 = [INODE_TABLE + inodeIndex*16 + 8];
call MEMORY_MANAGER;
multipop(R5, R6, R7, R8, R10);

[PTBR + 8] = R0;
[PTBR + 9] = "0100"; 

counter = 0;
while (counter < 3) do
	[PTBR + 2*(5+counter)] = -1;
	[PTBR + 2*(5+counter) + 1] = "0000"; 
	counter = counter + 1;
endwhile;

//Stack
multipush(R5, R6, R7, R8, R10);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R5, R6, R7, R8, R10);

[PTBR+16] = R0;
[PTBR+17] = "0110";

multipush(R5, R6, R7, R8, R10);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R5, R6, R7, R8, R10);

[PTBR+18] = R0;
[PTBR+19] = "0110";

[[PTBR+16]*512] = [[PTBR+8] * 512 + 1];

SP = 8*512;
[PROCESS_TABLE + PID*16 + 9] = 0;
// No.of Kernel Mode Switches
[29585] = [29585] + 1;

ireturn;
