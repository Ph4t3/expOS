alias functionNum R1;
alias PID R2;

//Acquire Disk
if (functionNum == ACQUIRE_DISK) then
    // Increment Disk Access Count
    [29585] = [29585] + 1;

    while ([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + PID*16 + 4] = WAIT_DISK;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = PID;
    return;
endif;

if (functionNum == ACQUIRE_TERMINAL) then
    while ([TERMINAL_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + PID*16 + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = PID;
    return;
endif;

if (functionNum == RELEASE_TERMINAL) then
    if (PID != [TERMINAL_STATUS_TABLE + 1]) then
        R0 = -1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE] = 0;
    alias counter R3;
    counter = 0;
    while (counter < 16) do
        if ([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
            [PROCESS_TABLE + counter*16 + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;
    R0 = 0;
    return;
endif;

if (functionNum == ACQUIRE_SEMAPHORE) then
    alias counter R10;
    counter = 0;
    while(counter < MAX_SEM_COUNT) do
        if([SEMAPHORE_TABLE + counter*4 + 1] == 0) then
            [SEMAPHORE_TABLE + counter*4 + 0] = -1;
            [SEMAPHORE_TABLE + counter*4 + 1] = 1;
            R0 = counter;
            return;
        endif;
        counter = counter + 1;
    endwhile;
    R0 = -1;
    return;
endif;

if (functionNum == RELEASE_SEMAPHORE) then
    alias SEMID R3;         
    alias counter R10;
    if([SEMAPHORE_TABLE + SEMID*4] == PID) then
        // Reset LOCKING PID
        [SEMAPHORE_TABLE + SEMID*4] = -1;
        // Make waiting processes READY
        counter = 0;
        while(counter < MAX_PROC_NUM) do
            if(([PROCESS_TABLE + counter*16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + counter*16 + 5] == SEMID)) then
                [PROCESS_TABLE + counter*16 + 4] = READY;
            endif;
            counter = counter + 1;
        endwhile;
    endif;
    // Decrement PROCESS_COUNT
    [SEMAPHORE_TABLE + SEMID*4 + 1] = [SEMAPHORE_TABLE + SEMID*4 + 1] - 1;
    return;
endif;
